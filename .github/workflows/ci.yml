name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  TF_VERSION: "1.7.0"
  TG_VERSION: "0.55.1"
  CHECKOV_VERSION: "3.2.25"

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit checkov==${{ env.CHECKOV_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Run pre-commit
        run: pre-commit run --all-files

  terraform-validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: [".", "examples/basic"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ matrix.directory }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ matrix.directory }}

      - name: Terraform Plan
        run: terraform plan
        working-directory: ${{ matrix.directory }}
        if: matrix.directory != '.'

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Checkov
        run: pip install checkov==${{ env.CHECKOV_VERSION }}

      - name: Run Checkov
        run: checkov -d . --framework terraform --skip-check CKV_TF_1

  test:
    runs-on: ubuntu-latest
    needs: [pre-commit, terraform-validate, security-scan]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Run tests
        run: |
          cd tests
          go mod tidy
          go test -v -timeout 30m

  docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Generate docs
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.17.0/terraform-docs-v0.17.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          ./terraform-docs markdown table --output-file README.md --output-mode inject .

      - name: Check for changes
        run: |
          if [[ `git status --porcelain` ]]; then
            echo "Documentation is out of date. Please run 'terraform-docs markdown table --output-file README.md --output-mode inject .' and commit the changes."
            git diff
            exit 1
          fi 